<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Android on 10cks</title>
    <link>https://10cks.top/tags/android/</link>
    <description>Recent content in Android on 10cks</description>
    <image>
      <url>https://10cks.top/papermod-cover.png</url>
      <link>https://10cks.top/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 21 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://10cks.top/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android系统安全书籍</title>
      <link>https://10cks.top/posts/android%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E4%B9%A6%E7%B1%8D/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://10cks.top/posts/android%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E4%B9%A6%E7%B1%8D/</guid>
      <description>书籍学习 外话：用书和文档镇楼，站在巨人的肩膀上，才能进步的更快，才能少踩坑，赶紧阅读吧少年们。
Android系统安全   Android安全架构深究
  Android安全攻防权威指南
  Android安全攻防实战 (南非)keith makan, 崔孝晨;武晓音(译)
  Android安全技术揭秘与防范
  Android软件安全与逆向分析
  Android系统基础   Android的设计与实现*卷1
  深入理解Android卷1*邓凡平
  深入理解Android卷2_邓凡平
  深入理解Android卷3_邓凡平
  Android技术内幕.系统卷
  Android系统级深入开发.移植与调试
  Android深度探索（卷2）系统应用源代码分析与ROM定制
  拨云见日-基于android的内核与系统架构源码分析
  Android底层开发技术实战详解 内核、移植和驱动 Android源码设计模式解析与实战
  Android：Wi-Fi NFC和GPS
  Android系统原理及开发要点详解(韩超,梁泉)
  Android框架揭秘(带完整书签高清扫描版)
  Linux内核  ORANGE’S：一个操作系统的实现 Linux内核设计与实现_第三版 Linux内核设计的艺术 Linux内核完全注释V3.</description>
    </item>
    
    <item>
      <title>Linux 内核监控在 Android 攻防中的应用</title>
      <link>https://10cks.top/posts/linux-%E5%86%85%E6%A0%B8%E7%9B%91%E6%8E%A7%E5%9C%A8-android-%E6%94%BB%E9%98%B2%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://10cks.top/posts/linux-%E5%86%85%E6%A0%B8%E7%9B%91%E6%8E%A7%E5%9C%A8-android-%E6%94%BB%E9%98%B2%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>在日常分析外部软件时，遇到的反调试/反注入防护已经越来越多，之前使用的基于 frida 的轻量级沙盒已经无法满足这类攻防水位的需要，因此需要有一种更加深入且通用的方式来对 APP 进行全面的监测和绕过。本文即为对这类方案的一些探索和实践。
背景 为了实现对安卓 APP 的全面监控，需要知道目标应用访问/打开了哪些文件，执行了哪些操作，并且可以修改控制这些操作的返回结果。一个直观的想法是通过 libc 作为统一收口来对应用行为进行收集，比如接管 open/openat/faccess/fstatat 实现文件访问监控以及进一步的文件重定向。
然而，现今许多聪明的加固 APP 都使用了内联系统调用汇编来绕过 libc 实现暗度陈仓，在 binary 层再加上控制流混淆、花指令、代码加密甚至是 VMP 等成熟的防御措施，使得识别这类隐藏调用变得十分困难。某不知名安全研究员曾经说过:
 Never to wrestle with a pig. You get dirty, and besides, the pig likes it.
 因此，我们不应该在应用层上和加固厂商做对抗，而是寻找其他突破点，以四两拨千斤的方式实现目的。当然，如果只是为了练手，那手撕虚拟机也是可以的 :)
现有方案 在介绍内核监控技术之前，我们先来看看目前已有的一些方案，以及它们的不足之处。
strace strace 是 Linux 中一个知名的用户态系统调用跟踪工具，可以输入目标进程所执行的系统调用的名称以及参数，常用于快速的应用调试和诊断。strace 的示例输出如下所示:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  $ strace echo evilpan execve(&amp;#34;/usr/bin/echo&amp;#34;, [&amp;#34;echo&amp;#34;, &amp;#34;evilpan&amp;#34;], 0x7fe55d5d18 /* 56 vars */) = 0 brk(NULL) = 0x57b1bd2000 faccessat(AT_FDCWD, &amp;#34;/etc/ld.</description>
    </item>
    
    <item>
      <title>Termux使用指南</title>
      <link>https://10cks.top/posts/termux%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://10cks.top/posts/termux%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>前言 很久之前就用过安卓的termux，最近在使用Telegam的API，想做一个追踪丢失手机的功能。不过在我的小米8（root）上从Google Play下载的termux无法进行pkg update，会出现502报错，百思不得其解。
后来在官方论坛找到原因，Google Play上的termux已经好久没有更新了，现在要从F-Droid上下载最新版本。我也懒得更换源了，换源的话就直接按照清华源的教程操作即可。如下：
1 2  sed -i &amp;#39;s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/apt/termux-main stable main@&amp;#39; $PREFIX/etc/apt/sources.list apt update &amp;amp;&amp;amp; apt upgrade   目标 开发一款APP，能够实现强制打开GPS并根据telegram指令定时发送GPS数据到指定用户。
实施 </description>
    </item>
    
  </channel>
</rss>
