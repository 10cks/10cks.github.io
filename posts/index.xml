<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 10cks</title>
    <link>https://10cks.top/posts/</link>
    <description>Recent content in Posts on 10cks</description>
    <image>
      <url>https://10cks.top/papermod-cover.png</url>
      <link>https://10cks.top/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 04 May 2022 14:49:48 +0800</lastBuildDate><atom:link href="https://10cks.top/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PT 下载从入门到养老篇一：站点介绍及生存指南</title>
      <link>https://10cks.top/posts/pt-%E4%B8%8B%E8%BD%BD%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%BB%E8%80%81%E7%AF%87%E4%B8%80%E7%AB%99%E7%82%B9%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 04 May 2022 14:49:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/pt-%E4%B8%8B%E8%BD%BD%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%BB%E8%80%81%E7%AF%87%E4%B8%80%E7%AB%99%E7%82%B9%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</guid>
      <description>本文最后更新于 2022 年 2 月。PT 站的前世今生，新手入门指南和概念扫盲。
专题文章目录  PT 下载从入门到养老篇一：站点介绍及生存指南 PT 下载从入门到养老篇二：隐匿的地下通讯 PT 下载从入门到养老篇三：NAS 存储服务器及硬盘选购  介绍 PT (Private Tracker) 是一种基于私有 BT Tracker 服务器的资源传播形式，经授权的用户使用受允许的客户端进行种子制作与下载。相较于传统 BT 和 emule，PT 站往往采取了严格的邀请制度以及免责制度来规避法律风险，同时要求用户客户端开启传输加密以绕过运营商的检测策略。当然，从实际上来说 PT 站的运营、使用仍然是违背了各国版权法的。
许多高清爱好者聚集在 PT 站，发布翻录的蓝光原盘、CD 资源以及录制的高清卫星电视讯号；得益于 Netflix、HBO、Apple TV 等高清流媒体在线视频平台的发展，近年也出现了一些 WEB-DL (Download from Web) 资源。
目前国内使用的 PT 站源码大部分为基于浙江大学 xiazuojie 团队所开发的开源整站项目 NexusPHP，基于 PHP + MySQL + memcached。部分站点使用 Discuz! 进行二次开发。
日前，@burpheart 基于上游项目，开发了新版的 NexuxPHP Safe。其修复了一些已知的安全漏洞，并加入了一些增强用户体验的小功能。
2022 年更新：@burpheart 似乎逐步淡出了项目维护。目前项目迁移至 xiaomlove/nexusphp，由 @xiaomlove 为主的开发者继续维护。
国内 PT 站可以划分为两个系别：教育网 PT 站 与 公网 PT 站。</description>
    </item>
    
    <item>
      <title>第 1 章 概述</title>
      <link>https://10cks.top/posts/%E7%AC%AC1%E7%AB%A0-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 03 May 2022 14:41:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/%E7%AC%AC1%E7%AB%A0-%E6%A6%82%E8%BF%B0/</guid>
      <description>计算机网络在信息时代中的作用 21 世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。 网络现已成为信息社会的命脉和发展知识经济的重要基础。 网络是指“三网”，即电信网络、有线电视网络和计算机网络。 发展最快的并起到核心作用的是计算机网络。 因特网(Internet)的发展  进入 20 世纪 90 年代以后，以因特网为代表的计算机网络得到了飞速的发展。 已从最初的教育科研网络逐步发展成为商业网络。 已成为仅次于全球电话网的世界第二大网络。  因特网的意义  因特网是自印刷术以来人类通信方面最大的变革。 现在人们的生活、工作、学习和交往都已离不开因特网。  因特网概述 网络的网络  起源于美国的因特网现已发展成为世界上最大的国际性计算机互联网 网络(network)由若干结点(node)和连接这些结点的链路(link)组成。 互联网是“网络的网络”(network of networks)。 连接在因特网上的计算机都称为主机(host)。 网络与因特网  网络把许多计算机连接在一起。 因特网则把许多网络连接在一起。    因特网发展的三个阶段  第一阶段是从单个网络 ARPANET 向互联网发展的过程。  1983 年 TCP/IP 协议成为 ARPANET 上的标准协议。 人们把 1983 年作为因特网的诞生时间。   第二阶段的特点是建成了三级结构的因特网。  三级计算机网络，分为主干网、地区网和校园网（或企业网）。   第三阶段的特点是逐渐形成了多层次 ISP 结构的因特网。  出现了因特网服务提供者 ISP (Internet Service Provider)。 根据提供服务的覆盖面积大小以及所拥有的IP 地址数目的不同，ISP 也分成为不同的层次。    因特网的标准化工作  制订因特网的正式标准要经过以下的四个阶段  因特网草案(Internet Draft) ——在这个阶段还不是 RFC 文档。 建议标准(Proposed Standard) ——从这个阶段开始就成为 RFC 文档。 草案标准(Draft Standard) 因特网标准(Internet Standard)   各种RFC之间的关系  计算机网络在我国的发展 因特网的组成 因特网的边缘部分  由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。  处在因特网边缘的部分就是连接在因特网上的所有的主机。这些主机又称为端系统(end system)。 “主机 A 和主机 B 进行通信”，实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。 即“主机 A 的某个进程和主机 B 上的另一个进程进行通信”。或简称为“计算机之间通信”    因特网的核心部分  由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）  网络核心部分是因特网中最复杂的部分。 网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。 在网络核心部分起特殊作用的是路由器(router)。  路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。  在路由器中的输入和输出端口之间没有直接连线。 路由器处理分组的过程是：  把收到的分组先放入缓存（暂时存储）； 查找转发表，找出到某个目的地址应从哪个端口转发； 把分组送到适当的端口转发出去。       路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。    计算机网络在我国的发展 (1) 中国公用计算机互联网 CHINANET (2) 中国教育和科研计算机网 CERNET (3) 中国科学技术网 CSTNET (4) 中国联通互联网 UNINET (5) 中国网通公用互联网 CNCNET (6) 中国国际经济贸易互联网 CIETNET (7) 中国移动互联网 CMNET (8) 中国长城互联网 CGWNET（建设中） (9) 中国卫星集团互联网 CSNET（建设中） 计算机网络的类别 计算机网络的定义  最简单的定义：计算机网络是一些互相连接的、自治的计算机的集合。 因特网(Internet)是“网络的网络”。  几种不同类别的网络  不同作用范围的网络  广域网 WAN (Wide Area Network) 局域网 LAN (Local Area Network) 城域网 MAN (Metropolitan Area Network) 个人区域网 PAN (Personal Area Network)   从网络的使用者进行分类  公用网 (public network) 专用网 (private network)    计算机网络的性能 计算机网络的性能指标  速率  比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。 Bit 来源于 binary digit，意思是一个“二进制数字”，因此一个比特就是二进制数字中的一个 1 或 0。 速率即数据率(data rate)或比特率(bit rate)是计算机网络中最重要的一个性能指标。速率的单位是 b/s，或kb/s, Mb/s, Gb/s 等 速率往往是指额定速率或标称速率。   带宽  “带宽”(bandwidth)本来是指信号具有的频带宽度，单位是赫（或千赫、兆赫、吉赫等）。 现在“带宽”是数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b/s (bit/s)。 常用的带宽单位  更常用的带宽单位是 千比每秒，即 kb/s （103 b/s） 兆比每秒，即 Mb/s（106 b/s） 吉比每秒，即 Gb/s（109 b/s） 太比每秒，即 Tb/s（1012 b/s） 请注意：在计算机界，K = 210 = 1024 M = 220, G = 230, T = 240。   数字信号流随时间的变化  在时间轴上信号的宽度随带宽的增大而变窄。     吞吐量  吞吐量(throughput)表示在单位时间内通过某个网络（或信道、接口）的数据量。 吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。 吞吐量受网络的带宽或网络的额定速率的限制。   时延(delay 或 latency)  传输时延（发送时延 ） 发送数据时，数据块从结点进入到传输媒体所需要的时间。 也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。 传播时延 电磁波在信道中需要传播一定的距离而花费的时间。 信号传输速率（即发送速率）和信号在信道上的传播速率是完全不同的概念。 处理时延 交换结点为存储转发而进行一些必要的处理所花费的时间。 排队时延 结点缓存队列中分组排队所经历的时延。 排队时延的长短往往取决于网络中当时的通信量。 数据经历的总时延就是发送时延、传播时延、处理时延和排队时延之和：   时延带宽积  链路的时延带宽积又称为以比特为单位的链路长度。   利用率  信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。 网络利用率则是全网络的信道利用率的加权平均值。 信道利用率并非越高越好。   时延与网络利用率的关系  根据排队论的理论，当某信道的利用率增大时，该信道引起的时延也就迅速增加。 若令 D0 表示网络空闲时的时延，D 表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示 D 和 D0之间的关系：  U 是网络的利用率，数值在 0 到 1 之间。      计算机网络的非性能特征  费用 质量 标准化 可靠性 可扩展性和可升级性 易于管理和维护  计算机网络的体系结构 计算机网络体系结构的形成  相互通信的两个计算机系统必须高度协调工作才行，而这种“协调”是相当复杂的。 “分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。  协议与划分层次  划分层次的必要性  计算机网络中的数据交换必须遵守事先约定好的规则。 这些规则明确规定了所交换的数据的格式以及有关的同步问题（同步含有时序的意思）。 网络协议(network protocol)，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。   网络协议的组成要素  语法 数据与控制信息的结构或格式 。 语义 需要发出何种控制信息，完成何种动作以及做出何种响应。 同步 事件实现顺序的详细说明。   分层的好处  各层之间是独立的。 灵活性好。 结构上可分割开。 易于实现和维护。 能促进标准化工作。    具有五层协议的体系结构  TCP/IP 是四层的体系结构：应用层、运输层、网际层和网络接口层。 但最下面的网络接口层并没有具体内容。 因此往往采取折中的办法，即综合 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构 。  实体、协议、服务和服务访问点  实体(entity) 表示任何可发送或接收信息的硬件或软件进程。 协议是控制两个对等实体进行通信的规则的集合。 在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。 要实现本层协议，还需要使用下层所提供的服务。 本层的服务用户只能看见服务而无法看见下面的协议。 下面的协议对上面的服务用户是透明的。 协议是“水平的”，即协议是控制对等实体之间通信的规则。 服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。 同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP (Service Access Point)。 协议必须把所有不利的条件事先都估计到，而不能假定一切都是正常的和非常理想的。 看一个计算机网络协议是否正确，不能光看在正常情况下是否正确，而且还必须非常仔细地检查这个协议能否应付各种异常情况。  Internet 和 Internet 的区别 以小写字母 i 开始的 internet（互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。 以大写字母I开始的的 Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET。 万维网 WWW 的问世 因特网已经成为世界上规模最大和增长速率最快的计算机网络，没有人能够准确说出因特网究竟有多大。 因特网的迅猛发展始于 20 世纪 90 年代。由欧洲原子核研究组织 CERN 开发的万维网 WWW (World Wide Web)被广泛使用在因特网上，大大方便了广大非网络专业人员对网络的使用，成为因特网的这种指数级增长的主要驱动力。 客户软件的特点 被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，客户程序必须知道服务器程序的地址。 不需要特殊的硬件和很复杂的操作系统。 服务器软件的特点 一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。 系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。 一般需要强大的硬件和高级的操作系统支持。 因特网的边缘部分与核心部分 两种国际标准 法律上的(de jure)国际标准 OSI 并没有得到市场的认可。 是非国际标准 TCP/IP 现在获得了最广泛的应用。 TCP/IP 常被称为事实上的(de facto) 国际标准。 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 主机 1 向主机 2 发送数据 分组交换 在发送端，先把较长的报文划分成较短的、固定长度的数据段。 添加首部构成分组  每一个数据段前面添加上首部构成分组  分组交换的传输单元  分组交换网以“分组”作为数据传输单元。 依次把各分组发送到接收端（假定接收端在左边）  分组首部的重要性  每一个分组的首部都含有地址等控制信息。 分组交换网中的结点交换机根据收到的分组的首部中的地址信息，把分组转发到下一个结点交换机。 用这样的存储转发方式，最后分组就能到达最终目的地。  收到分组后剥去首部  接收端收到分组后剥去首部还原成报文  最后还原成原来的报文 分组交换的优点  高效 动态分配传输带宽，对通信链路是逐段占用。 灵活 以分组为传送单位和查找路由。 迅速 不必先建立连接就能向其他主机发送分组。 可靠 保证可靠性的网络协议；分布式的路由选择协议使网络有很好的生存性。  分组交换带来的问题  分组在各结点存储转发时需要排队，这就会造成一定的时延。 分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。  电路交换 两部电话机只需要用一对电线就能够互相连接起来。 更多的电话机互相连通  5 部电话机两两相连，需 10 对电线。 N 部电话机两两相连，需 N(N – 1)/2 对电线。 当电话机的数量很大时，这种连接方法需要的电线对的数量与电话机数的平方成正比。  使用交换机  当电话机的数量增多时，就要使用交换机来完成全网的交换任务。  电路交换的特点  电路交换必定是面向连接的。 电路交换的三个阶段：  建立连接 通信 释放连接   电路交换传送计算机数据效率低  计算机数据具有突发性。 这导致通信线路的利用率很低。    三种交换的比较 两种通信方式 客户服务器方式（C/S 方式） 即Client/Server方式  客户(client)和服务器(server)都是指通信中所涉及的两个应用进程。 客户服务器方式所描述的是进程之间服务和被服务的关系。 客户是服务的请求方，服务器是服务的提供方。  对等方式（P2P 方式） 即 Peer-to-Peer方式  对等连接(peer-to-peer，简写为 P2P)是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。 只要两个主机都运行了对等连接软件（P2P 软件），它们就可以进行平等的、对等连接通信。 双方都可以下载对方已经存储在硬盘中的共享文档。 对等连接方式的特点  对等连接方式从本质上看仍然是使用客户服务器方式，只是对等连接中的每一个主机既是客户又同时是服务器。 例如主机 C 请求 D 的服务时，C 是客户，D 是服务器。但如果 C 又同时向 F提供服务，那么 C 又同时起着服务器的作用。    TCP/IP 的体系结构 关于开放系统互连参考模型OSI/RM 只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。 在市场化方面 OSI 却失败了。  OSI 的专家们在完成 OSI 标准时没有商业驱动力； OSI 的协议实现起来过分复杂，且运行效率很低； OSI 标准的制定周期太长，因而使得按 OSI 标准生产的设备无法及时进入市场； OSI 的层次划分并也不太合理，有些功能在多个层次中重复出现。  </description>
    </item>
    
    <item>
      <title>第 2 章  物理层</title>
      <link>https://10cks.top/posts/%E7%AC%AC2%E7%AB%A0-%E7%89%A9%E7%90%86%E5%B1%82/</link>
      <pubDate>Tue, 03 May 2022 14:41:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/%E7%AC%AC2%E7%AB%A0-%E7%89%A9%E7%90%86%E5%B1%82/</guid>
      <description>物理层的基本概念 物理层的主要任务描述为确定与传输媒体的接口的一些特性   机械特性 指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。
  电气特性 指明在接口电缆的各条线上出现的电压的范围。
  功能特性 指明某条线上出现的某一电平的电压表示何种意义。
  过程特性 指明对于不同功能的各种可能事件的出现顺序。
数据通信的基础知识 数据通信系统的模型   有关信道的几个基本概念   单向通信（单工通信）——只能有一个方向的通信而没有反方向的交互。
  双向交替通信（半双工通信）——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。
  双向同时通信（全双工通信）——通信的双方可以同时发送和接收信息。
  几种最基本的调制方法
  调幅(AM)：载波的振幅随基带数字信号而变化。
  调频(FM)：载波的频率随基带数字信号而变化。
  调相(PM) ：载波的初始相位随基带数字信号而变化。
  概要: 图片
信道的极限容量     信道能够通过的频率范围
 1924 年，奈奎斯特(Nyquist)就推导出了著名的奈氏准则。他给出了在假定的理想条件下，为了避免码间串扰，码元的传输速率的上限值    信噪比
  香农(Shannon)用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率。 信道的极限信息传输速率 C 可表达为 C = W log2(1+S/N) b/s W 为信道的带宽（以 Hz 为单位）； S 为信道内所传信号的平均功率； N 为信道内部的高斯噪声功率。</description>
    </item>
    
    <item>
      <title>第 3 章  数据链路层</title>
      <link>https://10cks.top/posts/%E7%AC%AC3%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</link>
      <pubDate>Tue, 03 May 2022 14:41:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/%E7%AC%AC3%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</guid>
      <description>使用点对点信道的数据链路层 数据链路和帧  数据链路层使用的信道主要有以下两种类型：  点对点信道。这种信道使用一对一的点对点通信方式。 广播信道。这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发   数据链路层模型 链路(link)是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。 数据链路(data link) 除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。 数据链路层传送的是帧  三个基本问题  (1) 封装成帧  将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。 *   (2) 透明传输  透明表示一个实际存在的事物看起来好像不存在一样。 帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。 *   (3) 差错控制   循环冗余检验 CRC 目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错。
  帧检验序列 FCS 在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。
  冗余码的计算
 例子： 现在 k = 6, M = 101001。 设 n = 3, 除数 P = 1101， 被除数是 2^nM = 101001000。 模 2 运算的结果是：商 Q = 110101， 余数 R = 001。 把余数 R 作为冗余码添加在数据 M 的后面发送出去。发送的数据是：2^nM + R 即：101001001，共 (k + n) 位。    概要: CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。 FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。</description>
    </item>
    
    <item>
      <title>第 4 章  网络层</title>
      <link>https://10cks.top/posts/%E7%AC%AC4%E7%AB%A0-%E7%BD%91%E7%BB%9C%E5%B1%82/</link>
      <pubDate>Tue, 03 May 2022 14:41:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/%E7%AC%AC4%E7%AB%A0-%E7%BD%91%E7%BB%9C%E5%B1%82/</guid>
      <description>网络层提供的两种服务 虚电路服务 数据报服务 概要: 虚电路服务与数据报服务的对比 网际协议 IP 网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有四个协议：  地址解析协议 ARP (Address Resolution Protocol) 逆地址解析协议 RARP (Reverse Address Resolution Protocol) 网际控制报文协议 ICMP (Internet Control Message Protocol) 网际组管理协议 IGMP (Internet Group Management Protocol) 概要: 示意图  虚拟互连网络  网络互相连接起来要使用一些中间设备  物理层中继系统：转发器(repeater)。 数据链路层中继系统：网桥或桥接器(bridge)。 网络层中继系统：路由器(router)。 网桥和路由器的混合物：桥路器(brouter)。 网络层以上的中继系统：网关(gateway)。    IP 数据报的格式  版本 : 有 4（IPv4）和 6（IPv6）两个值； 首部长度 : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。 区分服务 : 用来获得更好的服务，一般情况下不使用。 总长度 : 包括首部长度和数据部分长度。 生存时间 ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。 协议 ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。 首部检验和 ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。 标识 : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。 片偏移 : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。  IP数据报分片   概要: 示意图  分类的 IP 地址  IP 地址的编址方式经历了三个历史阶段：  分类  由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。 IP 地址 ::= {&amp;lt; 网络号 &amp;gt;, &amp;lt; 主机号 &amp;gt;}  示意图     子网划分  通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。      IP 地址 ::= {&amp;lt; 网络号 &amp;gt;, &amp;lt; 子网号 &amp;gt;, &amp;lt; 主机号 &amp;gt;}</description>
    </item>
    
    <item>
      <title>第 5 章 运输层</title>
      <link>https://10cks.top/posts/%E7%AC%AC5%E7%AB%A0-%E8%BF%90%E8%BE%93%E5%B1%82/</link>
      <pubDate>Tue, 03 May 2022 14:41:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/%E7%AC%AC5%E7%AB%A0-%E8%BF%90%E8%BE%93%E5%B1%82/</guid>
      <description>第 5 章 运输层 运输层协议概述 进程之间的通信  运输层向它上面的应用层提供通信服务，它属于面向通信部分的最高层，同时也是用户功能中的最低层。 两个主机进行通信实际上就是两个主机中的应用进程互相通信。 应用进程之间的通信又称为端到端的通信。 运输层协议和网络层协议的主要区别  运输层的两个主要协议  (1) 用户数据报协议 UDP(User Datagram Protocol)  UDP 传送的数据单位协议是 UDP 报文或用户数据报。   (2) 传输控制协议 TCP(Transmission Control Protocol)  TCP 传送的数据单位协议是 TCP 报文段(segment)    运输层的端口  软件端口与硬件端口  在协议栈层间的抽象的协议端口是软件端口。 路由器或交换机上的端口是硬件端口。   三类端口  熟知端口，数值一般为 0~1023。 登记端口号，数值为1024~49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。 客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。    用户数据报协议 UDP UDP 概述  用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。  UDP 的首部格式 传输控制协议 TCP 概述 TCP 最主要的特点  传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。  TCP 的连接  TCP 连接的端点叫做套接字(socket)或插口。  套接字 socket = (IP地址: 端口号)    可靠传输的工作原理 停止等待协议 连续 ARQ 协议 TCP 报文段的首部格式 序号 ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。 确认号 ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。 数据偏移 ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。 确认 ACK ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。 同步 SYN ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。 终止 FIN ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。 窗口 ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。 TCP 可靠传输的实现 以字节为单位的滑动窗口  窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。  发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</description>
    </item>
    
    <item>
      <title>第 6 章 应用层</title>
      <link>https://10cks.top/posts/%E7%AC%AC6%E7%AB%A0-%E5%BA%94%E7%94%A8%E5%B1%82/</link>
      <pubDate>Tue, 03 May 2022 14:41:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/%E7%AC%AC6%E7%AB%A0-%E5%BA%94%E7%94%A8%E5%B1%82/</guid>
      <description>第 6 章 应用层 域名系统 DNS 域名系统概述  DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。  因特网的域名结构  域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名。  域名服务器  一个服务器所负责管辖的（或有权限的）范围叫做区(zone)。 每一个区设置相应的权限域名服务器，用来保存该区中的所有主机的域名到IP地址的映射。  DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：  如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。 区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。    文件传送协议 FTP 概述  文件传送协议 FTP (File Transfer Protocol) 是因特网上使用得最广泛的文件传送协议。 FTP 提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限。 FTP 屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。  FTP 的基本工作原理  FTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：  控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。 数据连接：用来传送一个文件数据。   根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：  主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。 被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。 主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。    简单文件传送协议 TFTP  TFTP 是一个很小且易于实现的文件传送协议。 TFTP 使用客户服务器方式和使用 UDP 数据报，因此 TFTP 需要有自己的差错改正措施。 TFTP 只支持文件传输而不支持交互。 TFTP 没有一个庞大的命令集，没有列目录的功能，也不能对用户进行身份鉴别。 TFTP 的主要特点是 (1) 每次传送的数据 PDU 中有 512 字节的数据，但最后一次可不足 512 字节。 (2) 数据 PDU 也称为文件块(block)，每个块按序编号，从 1 开始。 (3) 支持 ASCII 码或二进制传送。 (4) 可对文件进行读或写。 (5) 使用很简单的首部。  远程终端协议 TELNET 简述  TELNET 是一个简单的远程终端协议，也是因特网的正式标准。 用户用 TELNET 就可在其所在地通过 TCP 连接注册（即登录）到远地的另一个主机上（使用主机名或 IP 地址）。 TELNET 能将用户的击键传到远地主机，同时也能将远地主机的输出通过 TCP 连接返回到用户屏幕。这种服务是透明的，因为用户感觉到好像键盘和显示器是直接连在远地主机上。  万维网 WWW 概述  万维网 WWW (World Wide Web)并非某种特殊的计算机网络。 万维网是一个大规模的、联机式的信息储藏所。 万维网用链接的方法能非常方便地从因特网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。 这种访问方式称为“链接”。 万维网是分布式超媒体(hypermedia)系统，它是超文本(hypertext)系统的扩充。  万维网的工作方式  万维网以客户服务器方式工作。 浏览器就是在用户计算机上的万维网客户程序。万维网文档所驻留的计算机则运行服务器程序，因此这个计算机也称为万维网服务器。  万维网必须解决的问题  (1) 怎样标志分布在整个因特网上的万维网文档？ 使用统一资源定位符 URL (Uniform Resource Locator)来标志万维网上的各种文档。 使每一个文档在整个因特网的范围内具有唯一的标识符 URL。 (2) 用何协议实现万维网上各种超链的链接？ 在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是超文本传送协议 HTTP (HyperText Transfer Protocol)。 HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。 (3) 怎样使各种万维网文档都能在因特网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链？ 超文本标记语言 HTML (HyperText Markup Language)使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到因特网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。 (4) 怎样使用户能够很方便地找到所需的信息？ 为了在万维网上方便地查找信息，用户可使用各种的搜索工具（即搜索引擎）。  统一资源定位符 URL  统一资源定位符 URL 是对可以从因特网上得到的资源的位置和访问方法的一种简洁的表示。 URL 的一般形式是：&amp;lt;协议&amp;gt;://&amp;lt;主机&amp;gt;:&amp;lt;端口&amp;gt;/&amp;lt;路径&amp;gt;  超文本传送协议 HTTP  HTTP 是面向事务的客户服务器协议。 HTTP 1.</description>
    </item>
    
    <item>
      <title>markdown里写代码块</title>
      <link>https://10cks.top/posts/markdown%E9%87%8C%E5%86%99%E4%BB%A3%E7%A0%81%E5%9D%97/</link>
      <pubDate>Fri, 01 Apr 2022 14:49:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/markdown%E9%87%8C%E5%86%99%E4%BB%A3%E7%A0%81%E5%9D%97/</guid>
      <description>markdown 里写代码块 这部分用直观的对照一个一个例子来呈现，先展示代码块渲染在页面上的样子，紧接着展示 markdown 源码怎么写。
1. 最普通的用法 渲染效果：
1 2 3  fn main(){println!(&amp;#34;Hello, world!&amp;#34;);}  markdown 写法：
1 2 3 4 5  ```rust fn main() { println!(&amp;#34;Hello, world!&amp;#34;); } ```   对于不带行号的代码块，默认的样式布局可能会显得有些局促，调整一下文章的 CSS：
1 2 3 4 5  /* 不带行号的代码块 */ .highlight&amp;gt;pre { padding: 10px; /* 适当留出边距 */ overflow: auto; /* 代码行太长向右滚动 */ }   2. 带行号的 渲染效果：
1 2 3  fn main(){println!(&amp;#34;Hello, world!&amp;#34;);}  对应的 markdown 写法：</description>
    </item>
    
    <item>
      <title>Hugo博客自定义shortcodes</title>
      <link>https://10cks.top/posts/hugo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89shortcodes/</link>
      <pubDate>Fri, 01 Apr 2022 14:41:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/hugo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89shortcodes/</guid>
      <description>hugo博客通过简码的方式插入ppt、bilibili、youtube等功能
创建: 2022-04-16 | 更新: 2022-04-16 | 字数: 676字 | 时长: 2分钟 | 作者: Sulv | 标签:
Hugo 、博客搭建
1. 引入 ppt 功能 定位到 layouts/shortcodes目录，新建一个文件叫 ppt.html，放入如下代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  &amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; #googleslides_shortcodes { padding-bottom: 66%; position: relative; display: block; width: 100%; border-bottom: 5px solid; } #googleslides_shortcodes iframe { position: absolute; top: 0; left: 0 } &amp;lt;/style&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;googleslides_shortcodes&amp;#34;&amp;gt; &amp;lt;iframe id=&amp;#34;googleSlideIframe&amp;#34; width=&amp;#34;100%&amp;#34; height=&amp;#34;100%&amp;#34; src=&amp;#34;{{ .</description>
    </item>
    
    <item>
      <title>Github_page搭建指南</title>
      <link>https://10cks.top/posts/github_page%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 01 Mar 2022 14:41:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/github_page%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</guid>
      <description>1 2 3 4 5  git init git add . git commit -m &amp;#34;date&amp;#34; git remote add origin https://github.com/10cks/10cks.github.io.git git push -u -f origin master   </description>
    </item>
    
    <item>
      <title>echarts测试</title>
      <link>https://10cks.top/posts/echarts%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 01 Feb 2022 14:41:48 +0800</pubDate>
      
      <guid>https://10cks.top/posts/echarts%E6%B5%8B%E8%AF%95/</guid>
      <description>var myChart = echarts.init(document.getElementById(&#39;echarts500&#39;),);var option = JSON.parse(&#34;\r\n{\r\n \&#34;tooltip\&#34;: {\r\n \&#34;trigger\&#34;: \&#34;item\&#34;\r\n },\r\n \&#34;legend\&#34;: {\r\n \&#34;top\&#34;: \&#34;5%\&#34;,\r\n \&#34;left\&#34;: \&#34;center\&#34;,\r\n \&#34;textStyle\&#34;: {\r\n \&#34;color\&#34;: \&#34;yellow\&#34;\r\n }\r\n },\r\n \&#34;series\&#34;: [\r\n {\r\n \&#34;name\&#34;: \&#34;Access From\&#34;,\r\n \&#34;type\&#34;: \&#34;pie\&#34;,\r\n \&#34;radius\&#34;: [\r\n \&#34;40%\&#34;,\r\n \&#34;70%\&#34;\r\n ],\r\n \&#34;avoidLabelOverlap\&#34;: false,\r\n \&#34;itemStyle\&#34;: {\r\n \&#34;borderRadius\&#34;: 10,\r\n \&#34;borderColor\&#34;: \&#34;#fff\&#34;,\r\n \&#34;borderWidth\&#34;: 2\r\n },\r\n \&#34;label\&#34;: {\r\n \&#34;show\&#34;: false,\r\n \&#34;position\&#34;: \&#34;center\&#34;\r\n },\r\n \&#34;emphasis\&#34;: {\r\n \&#34;label\&#34;: {\r\n \&#34;show\&#34;: true,\r\n \&#34;fontSize\&#34;: \&#34;40\&#34;,\r\n \&#34;fontWeight\&#34;: \&#34;bold\&#34;\r\n }\r\n },\r\n \&#34;</description>
    </item>
    
    <item>
      <title>本博客使用的css</title>
      <link>https://10cks.top/posts/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%9A%84css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://10cks.top/posts/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%9A%84css/</guid>
      <description>是针对footer.css 这个文件的修改
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92  .</description>
    </item>
    
    <item>
      <title>模板</title>
      <link>https://10cks.top/posts/%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://10cks.top/posts/%E6%A8%A1%E6%9D%BF/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
